<h4>Red-Black Tree</h4>
<p>is a binary tree with colored nodes. It has a constraint on occurance of nodes: (i) the root and leafs must be black, (ii) red nodes' children must be black, and (iii) the number of black nodes on the path from a node to every leaf must be constant.</p>
<h5>Production rules (indexed)</h5>
<pre>
l@@ rbtree($k,0,R) :- $k >= 0, $k =< 1 | leaf(R).
b@@ rbtree($k,$n,R) :-
  $m >= 0, $m = $n-1, $k >= 0, $k =< 1 |
  b(rbtree(1,$m),rbtree(1,$m),R).
r@@ rbtree(1,$n,R) :- $n >= 0 |
  r(rbtree(0,$n),rbtree(0,$n),R).
</pre>
<h5>Example well-typed graphs</h5>
<pre>
b(S,r(leaf,leaf),R)
  : rbtree($k1,1,R) - rbtree(1,0,S) where $k1 = 0 or 1
</pre>
<h5>Example well-typed rule</h5>
<pre>
node2(N1,Y1,Y2,L2,L1),node2(N2,X1,X2,Y2,Y1)
  :- node2(N1,Y,X2,L2,L1),node1(N2,X1,Y)
</pre>
because both sides are typed <code>skiplist(L2,L1) - int(N1),int(N2),skiplist(X2,X1)</code> (see the typing above).
